class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n=grid.size();
        vector<vector<int>> vis(n,vector<int>(n,0));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>> >q;
        q.push({grid[0][0],{0,0}});
        int mini=grid[0][0];
        vis[0][0]=1;
        while(!q.empty()){
            int wt=q.top().first;
            int row=q.top().second.first;
            int col=q.top().second.second;
            cout<<row<<" "<<col<<endl;
            
            q.pop();
            int drow[]={-1,0,1,0};
            int dcol[]={0,1,0,-1};
             mini= max(mini,wt);
            
            for(int i=0;i<4;i++){
                int nrow=drow[i]+row;
                int ncol=dcol[i]+col;
                if(nrow>=0&&ncol>=0&&nrow<n&&ncol<n){
                   if(!vis[nrow][ncol]){
                       vis[nrow][ncol]=1;
                       if(nrow==n-1&&ncol==n-1)return max(mini,grid[nrow][ncol]);
                       q.push({grid[nrow][ncol],{nrow,ncol}});
                   }
                }
            }
        }
        return mini;
    }
};
