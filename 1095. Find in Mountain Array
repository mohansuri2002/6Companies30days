/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
    int binary_search(int target, MountainArray &mountainArr,int start,int end){
        while(start<=end){
            int mid=(start+end)/2;
            int val=mountainArr.get(mid);
            if(val==target)return mid;
            else if(val<target)start=mid+1;
            else end=mid-1;
        }
        return -1;
    }
    int binary_search2(int target, MountainArray &mountainArr,int start,int end){
        while(start<=end){
            int mid=(start+end)/2;
            int val=mountainArr.get(mid);
            if(val==target)return mid;
            else if(val<target)end=mid-1;
            else start=mid+1;
        }
        return -1;
    }
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int n=mountainArr.length();
        int low=0,high=n-1;
        int peak;
        while(low<=high){
            int mid=(low+high)/2;
            int first=-1,third=-1;
            if(mid!=0)
              first=mountainArr.get(mid-1);
            int second=mountainArr.get(mid);
            if(mid!=n-1)
              third=mountainArr.get(mid+1);
            if(first<second&&second>third){
                peak=mid;
                cout<<second;
                break;
            }
            else if(first<second&&second<third){
                low=mid+1;
            }
            else high=mid-1;
        }
        
        int result= binary_search(target,mountainArr,0,peak);
        if(result!=-1)return result;
        result= binary_search2(target,mountainArr,peak+1,n-1);
         if(result!=-1)return result;
        return -1;
    }
};
