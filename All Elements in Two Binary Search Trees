/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
     void Inorder_traversal(TreeNode*root,vector<int>&val){
         if(root){
             Inorder_traversal(root->left,val);
             val.push_back(root->val);
             Inorder_traversal(root->right,val);
         }
     }
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int>root1_val;
        Inorder_traversal(root1,root1_val);
        vector<int>root2_val;
        Inorder_traversal(root2,root2_val);
        root1_val.push_back(INT_MAX);
        root2_val.push_back(INT_MAX);
        int i=0,j=0;
        vector<int>ans;
        
        while(i<root1_val.size()-1||j<root2_val.size()-1){
 
            if(root1_val[i]<root2_val[j]){
               
                ans.push_back(root1_val[i]);
                i++;
            }
            else{
                ans.push_back(root2_val[j]);
                j++;
            }
        }
        return ans;
    }
};
