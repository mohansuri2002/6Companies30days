class Solution {
    void dfs(vector<vector<int>>& grid,int row,int col){
        grid[row][col]=1;
        int nrow[]={-1,0,1,0};
        int ncol[]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int trow=row+nrow[i];
                int tcol=col+ncol[i];
                if(trow>=0&&tcol>=0&&trow<grid.size()&&tcol<grid[0].size()&&grid[trow][tcol]==0){
                  dfs(grid,trow,tcol);
                }
            }
    }
public:
    int closedIsland(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++){
            if(grid[i][0]==0)q.push({i,0});
            if(grid[i][m-1]==0)q.push({i,m-1});
        }
        for(int j=1;j<m-1;j++){
            if(grid[0][j]==0)q.push({0,j});
            if(grid[n-1][j]==0)q.push({n-1,j});
        }
        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            if(grid[row][col]==1)continue;
            grid[row][col]=1;
            int nrow[]={-1,0,1,0};
            int ncol[]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int trow=row+nrow[i];
                int tcol=col+ncol[i];
                if(trow>=0&&tcol>=0&&trow<n&&tcol<m&&grid[trow][tcol]==0){
                  q.push({trow,tcol});
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0){
                   count++;
                   dfs(grid,i,j);
                }
            }
        }
        return count;
    }
};
