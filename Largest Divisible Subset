class Solution {
public:
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
         int n=nums.size();
        int maxi=0;
        int lastind=0;
        sort(nums.begin(),nums.end());
      vector<int>dp(n+1,0),hash(n);
      for(int ind=0;ind<n;ind++){
          hash[ind]=ind;
          for(int prev=0;prev<ind;prev++ ){
              if(nums[ind]%nums[prev]==0&&1+dp[prev]>dp[ind]){
                  dp[ind]=1+dp[prev];
                  hash[ind]=prev;
              }
          }
          if(maxi<dp[ind]){
              maxi=dp[ind];
              lastind=ind;
          }
      }
      vector<int>ans;
      ans.push_back(nums[lastind]);
      while(hash[lastind]!=lastind){
          lastind=hash[lastind];
          ans.push_back(nums[lastind]);
      }
      return ans;
    }
};
